
@model RésuméBuilder.ViewModels.SkillsViewModel


@{
    int id = Convert.ToInt32(Session["id"]);
    int count = Convert.ToInt32(Session["counter"]);
}

@using (Html.BeginForm("AddSkillsFormAction", "Skills", FormMethod.Post))
{

    <div>

        <button type="button" onclick="RemoveRow(this)">[DELETE]</button>

        <!-- APPLICANT ID: AUTOMATICALLY SET TO SPECIFIC VALUE -->
        <!-- This input field will be passed with the rest of the form data
         it ensures consistency of ApplicantID between Applicant and Personal.
         Hidden in a <div> to prevent accidental changes or tampering
    -->
        <div hidden>
            <input name="applicantID" type="number" value="@id" />
        </div>


        <div class="form-group">

            @Html.LabelFor(s => s.SkillBatch[0].SkillCategory)
            @Html.TextBoxFor(s => s.SkillBatch[0].SkillCategory, new { @class = "form-control" })

            @Html.LabelFor(s => s.SkillBatch[0].SkillPoint)
            @Html.TextBoxFor(s => s.SkillBatch[0].SkillPoint, new { @class = "form-control" })

        </div>




        <!-- FORM DATA SUBMISSION -->
        <input id="submit" type="submit" class="btn btn-primary" value="SUBMIT">

    </div>
}



<script type="text/javascript">

    $("#submit").click(function () {

        function Submit() {

            window.alert("SUBMITTING...");

            $('#container').load('/Skills/SkillRowCreate');
        }

        //SOLUTION: https://www.w3schools.com/jsref/met_win_settimeout.asp
        setTimeout(function () {
            Submit()
        }, 10); //1000 = 1 second

    });


    //REMOVE A SINGLE SKILL ROW
    function RemoveRow(elem) {

        //To Delete an item using remove(), it requires the parent to be deleted.
        //Therefore, to work effectively, the child item should be stored in a parent,
        //such as a <div>
        elem.parentElement.remove();





    }


</script>