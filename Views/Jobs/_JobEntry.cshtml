<h1>SUBMISSION PAGE</h1>


@{
    var id = Convert.ToInt32(Session["id"]);
}

<h3>ENTER DATA</h3>

<table>

    <tbody>

        <tr>
            <td><button id="addrow" type="button">[ADD A JOB ROW]</button></td>
            <td><button id="submitallrows" type="button" onclick="SubmitAllRows()">[SUBMIT ALL ROWS]</button></td>
            <td><button id="deleteallrows" type="button" onclick="RemoveAllRows()">[DELETE ALL ROWS]</button></td>
        </tr>

    </tbody>

</table>

<br />


<script>

    var current = new Date();
    //window.alert(current);

    var date = current.getFullYear() + '-' + ('0' + (current.getMonth() + 1)).slice(-2) + '-' + ('0' + current.getDate()).slice(-2);
    var time = ('0' + current.getHours()).slice(-2) + "-" + ('0' + current.getMinutes()).slice(-2) + "-" + ('0' + current.getSeconds()).slice(-2);

    var currentDateTime = date + "_" + time + "_";
    //window.alert(currentDateTime+"Test");

</script>


<script>

    //CREATE HTML ELEMENTS

    var count = 0;
    var detailcount = 0;


    $("#addrow").click(function () {

            window.alert(`Add a Job row for Applicant #${@id}`);

            CreateJobRow(count);
            
            count++;


    });

    function CreateJobRow(count) {

        window.alert("CREATING ROW: " + count);

        var jobid = `applicant_${@id}_job_${count}`;
        window.alert("JOB ID: "+jobid);

        var jobrowid = "jobrow_" + count;
        window.alert("ROW ID: " + jobrowid);

        var classid = "submit";


        //DIV CONTAINERS
        var divOpen = $(`<div class="jobexperience">`);
        var divClose = $(`</div><br />`);

        var jobrowOpen = $(`<div id="${jobrowid}" class="${classid} name="skill" >`);
        var jobrowClose = $(`</div><br /><br />`);


        //INPUT FIELD ROW IDS
        var companyNameID = jobrowid + "_jobcompanyname";
        var positionID = jobrowid + "_jobposition";
        var fromDateID = jobrowid + "_jobfromdate";
        var toDateID = jobrowid + "_jobtodate";


        //BUTTONS
        var sub_job_btn = document.createElement("button");
        sub_job_btn.innerHTML = "SUBMIT ROW";
        sub_job_btn.type = "button";
        sub_job_btn.name = "formBtn_Submit";
        sub_job_btn.class = "submitone";
        sub_job_btn.onclick = function () {

            SubmitJobRow(jobrowid);
            window.alert("Single Job Row Submission Complete!");
            RemoveJobRow(this);

        };
        sub_job_btn.style.background = "mediumblue";
        sub_job_btn.style.color = "white";
        sub_job_btn.style.borderRadius = "3px";

        var del_job_btn = document.createElement("button");
        del_job_btn.innerHTML = "DELETE ROW";
        del_job_btn.type = "button";
        del_job_btn.name = "formBtn_Delete";
        del_job_btn.class = "deleteone";
        del_job_btn.onclick = function () {

            RemoveJobRow(this);

        }
        del_job_btn.style.background = "darkred";
        del_job_btn.style.color = "white";
        del_job_btn.style.borderRadius = "3px";


        var add_detail_btn = document.createElement("button");
        add_detail_btn.innerHTML = "ADD DETAIL";
        add_detail_btn.type = "button";
        add_detail_btn.name = "formBtn_AddDetail";
        add_detail_btn.class = "adddetailone";
        add_detail_btn.onclick = function () {

            CreateJobDetailField(jobrowid);
            window.alert("Detail Added!");
            
        };
        add_detail_btn.style.background = "lightblue";
        add_detail_btn.style.color = "white";
        add_detail_btn.style.borderRadius = "3px";

        


        //INPUT SUB-FIELDS IN A DIV CONTAINER
        //In JS, deleting a child requires deleting the parent. So we use a div container as a parent
        var jobDetailDivID = jobrowid + "_jobdetaildiv";
        var jobDetailDivOpen = $(`<div id="${jobDetailDivID}">`);
        var jobDetailDivClose = $(`</div><br /><br />`);


        var companyNameField = $(`<input name="JobCompanyName" type="text" class="jobcompanyname" id="${companyNameID}" size="2000" placeholder="Company Name" />`);
        var positionField = $(`<input name="JobPosition" type="text" class="jobposition" id="${positionID}" size="2000" placeholder="Company Position" />`);
        var fromDateField = $(`<input name="JobFromDate" type="text" class="jobfromdate" id="${fromDateID}" size="2000" placeholder="Start Date: YYYY-MM" />`);
        var toDateField = $(`<input name="JobFromDate" type="text" class="jobtodate" id="${toDateID}" size="2000" placeholder="End Date: YYYY-MM OR Present" />`);

        //UNIQUELY IDENTIFY EACH JOB ROW CREATED
        //This field will remain hidden, so the type is set as such (hidden):
        var jobrowIDField = $(`<input name="JobRowID" type="hidden" class="jobrowidfield" id="${jobrowid}" size="2000" value="${jobrowid}" />`);

        var record = divOpen.append(

            jobrowOpen.append(

                jobrowIDField,
                $(`<br />`),
                sub_job_btn,
                del_job_btn,
                $(`<br />`),
                $(`<br />`),
                companyNameField,
                positionField,
                $(`<br />`),
                fromDateField,
                toDateField,
                $(`<br />`),
                $(`<br />`),                
                add_detail_btn,                
                $(`<br />`),
                jobDetailDivOpen.append(jobDetailDivClose)



            ).append(

                jobrowClose.append(

                    divClose
                )

            )


        );



        $("#container").append(record);

        window.alert("Row Creation COMPLETE");



    }//CreateRow()


    function CreateJobDetailField(jobrowid) {

        var jobDetailDivID = jobrowid + "_jobdetaildiv";
        var jobDetailDivTargetID = "#" + jobDetailDivID;

        var jobDetailID = jobrowid + "_detail_" + detailcount;

        //window.alert(`Creating Input field to append to ${jobDetailDivTargetID}`);

        
        //DIV CONTAINERS
        //Parent div to store input field AND to contain child when deleted
        var divDetailOpen = $(`<div>`);
        var divDetailClose = $(`</div><br />`);

        //INPUT FIELD
        var detailField = $(`<input name="JobDetail" type="text" class="jobdetail" id="${jobDetailID}" size="2000" placeholder="Specify job details" />`);

        //BUTTON
        var del_detail_btn = document.createElement("button");
        del_detail_btn.innerHTML = "DELETE ROW";
        del_detail_btn.type = "button";
        del_detail_btn.name = "formBtn_Delete";
        del_detail_btn.class = "deleteone";
        del_detail_btn.onclick = function () {

            RemoveJobFunctionRow(this);

        }
        del_detail_btn.style.background = "red";
        del_detail_btn.style.color = "white";
        del_detail_btn.style.borderRadius = "3px";

        
        var detail = divDetailOpen.append(

            detailField,
            del_detail_btn

        ).append(divDetailClose)

        window.alert(`Adding Job Function with ID: ${jobDetailID}`);

        $(jobDetailDivTargetID).append(detail);

        detailcount++;

    }//CreateJobDetailField()


</script>

<script>

    //DELETIONS

    //REMOVE A SINGLE ITEM
    function RemoveRow(elem) {

        //To Delete an item using remove(), it requires the parent to be deleted.
        //Therefore, to work effectively, the child item should be stored in a parent,
        //such as a <div>
        elem.parentElement.remove();

    }//RemoveRow()


    //REMOVE A SINGLE ITEM
    function RemoveJobFunctionRow(elem) {

        //To Delete an item using remove(), it requires the parent to be deleted.
        //Therefore, to work effectively, the child item should be stored in a parent,
        //such as a <div>
        elem.parentElement.remove();

        detailcount--;

    }//RemoveRow()

    //REMOVE A SINGLE JOB ROW
    function RemoveJobRow(elem) {

        //To Delete an item using remove(), it requires the parent to be deleted.
        //Therefore, to work effectively, the child item should be stored in a parent,
        //such as a <div>
        elem.parentElement.remove();

        //Adjust counter (decrement)
        count--;

    }//RemoveRow()


    //REMOVE ALL ELEMENTS STORED IN A PARENT DIV (BY REMOVING PARENT DIV ITSELF)
    function RemoveDiv() {

        //https://bobbyhadz.com/blog/javascript-remove-parent-element
        const child = document.getElementById('totalremoval');

        child.parentElement.remove();

    }//RemoveDiv()


    //CALL FUNCTION TO REMOVE ALL JOB ROWS
    function RemoveAllRows() {


        if (count > 0) {

            //Call RemoveRow() for div with id "totalremoval"
            RemoveDiv();


            //Re-add a parent container so that new rows can be added afterwards
            var container = $(`<div id="container"></div></br>`);
            $("#main").append(container);


            //Re-add delete-all div also
            var deletealldiv = $(`<div id="totalremoval"></div>`);
            $("#container").append(deletealldiv);

            //Reset row counter
            count = 0;


        }


    }//RemoveAllRows()



</script>


<script>

    //SUBMISSIONS
    function SubmitJobRow(jobrowid) {

        window.alert("Standby for submission of all data for Job Row ID " + jobrowid);

        var applicantid = @id;

        //Create a unique jobid number using timestamp and job row number
        //Convert current time to string with a format of YYYY-MM-DD_HH-MM-SS_
        //https://tecadmin.net/get-current-date-time-javascript/

        //GET CURRENT DATE-TIME
        var current = new Date();
        //window.alert(current);

        //FORMAT CURRENT DATE-TIME TO YYYY-MM-DD_HH-MM-SS_
        //http://jsfiddle.net/j6qJp/1/
        var date = current.getFullYear() + '-' + ('0' + (current.getMonth() + 1)).slice(-2) + '-' + ('0' + current.getDate()).slice(-2);
        var time = ('0' + current.getHours()).slice(-2) + "-" + ('0' + current.getMinutes()).slice(-2) + "-" + ('0' + current.getSeconds()).slice(-2);

        var currentDateTime = date + "_" + time + "_";
        //window.alert(currentDateTime);


        var jobno = currentDateTime+jobrowid;

        window.alert(`Unique Job Row ID = ${jobno} of lenght ${jobno.length}`);

        //PART 01:
        //PULL DATA FOR JOB ROW PRIMARY FIELDS ==
        var companyNameID = jobrowid + "_jobcompanyname";
        var positionID = jobrowid + "_jobposition";
        var fromDateID = jobrowid + "_jobfromdate";
        var toDateID = jobrowid + "_jobtodate";

        var company = document.getElementById(companyNameID).value;
        var position = document.getElementById(positionID).value;
        var fromDate = document.getElementById(fromDateID).value;
        var toDate = document.getElementById(toDateID).value;


        window.alert(`PRIMARY FIELD DATA: ${company} - ${position} - ${fromDate} - ${toDate}`);


        //PART 02:
        //PULL DATA FOR JOB ROW SUB FIELDS ==
        //STORE IN AN ARRAY
        //var jobDetailID = jobrowid + "_detail_" + detailcount;
        var queryPartial = jobrowid + "_detail_";
        window.alert(`Query Partial: ${queryPartial}`);


        //PULL ALL ROWS WITH REQUIRED ID DATA ON PAGE USING PARTIAL DATA SEARCH AND ADD THEM TO NODELIST:
        //https://bobbyhadz.com/blog/javascript-get-element-by-id-contains
        //Find all job functions related to the job row and store them in a node list:
        var jobfunctionNodeList = document.querySelectorAll(`[id*="${queryPartial}"]`);

        //var len1 = jobfunctionNodeList.length;
        //window.alert(`${len1} job function(s) found`);

        //Convert NodeList to Array
        //https://www.geeksforgeeks.org/how-to-convert-a-dom-nodelist-to-an-array-using-javascript/
        const jobfunctionArr = Array.from(jobfunctionNodeList);


        //Declare empty array to store valid Job Functions
        //https://www.quora.com/How-do-you-declare-an-empty-array-in-JavaScript
        var JobFunctions = [];

        //Traverse array
        //https://stackoverflow.com/questions/9329446/for-each-over-an-array-in-javascript
        for(var jobfunction of jobfunctionArr)
        {
            //window.alert(jobfunction.value);

            //if job function is not an empty string value, add to array called JobFunctions
            //https://stackoverflow.com/questions/351409/how-to-append-something-to-an-array
            if (jobfunction.value != "") JobFunctions.push(jobfunction.value);

        }

        var arr_len = JobFunctions.length;
        window.alert(arr_len+" job function(s) to be submitted!");

        //Traverse finalized array of Job Functions
        for (var jobfunctionValid of JobFunctions) {

            window.alert(jobfunctionValid);

        }

        //PART 03:
        //SUBMISSION OF ALL DATA

        //WITH ALL DATA COLLECTED, POST DATA TO RESPECTIVE CONTROLLER ACTIONS USING AJAX QUERY ====

        //POST PRIMARY FIELDS TO CONTROLLER ACTION THAT IS HANDLING JOB TABLE:
        //What's being posted: applicantid, jobno, company, position, fromdate, todate

        //AJAX START
            $.ajax({

                type: 'POST',
                url: '@Url.Action("AddJobFormActionQuery")',
                //The traditional parameter is required for dealing with non-primitive datatypes like arrays
                traditional: true,
                data: {
                    applicantID: applicantid,
                    jobNumberID: jobno,
                    companyName: company,
                    position: position,
                    fromDate: fromDate,
                    toDate: toDate
                }

            })//end ajax
            //AJAX STOP

        //POST SECONDARY FIELDS TO CONTROLLER ACTION THAT IS HANDLING JOB DETAILS TABLE:
        //What's being posted: applicantid, jobno, JobFunctions

        //Posting an array to Controller Action using Ajax Query:
        //https://www.youtube.com/watch?v=sQjkEBD68RQ&ab_channel=NETDevelopment

        //AJAX START
            $.ajax({

                type: 'POST',
                url: '@Url.Action("AddJobDetailsFormActionQuery")',
                //The traditional parameter is required for dealing with non-primitive datatypes like arrays
                traditional: true,
                data: {
                    applicantID: applicantid,
                    jobNumberID: jobno,
                    jobFunctionsList: JobFunctions
                }

            })//end ajax
            //AJAX STOP

        window.alert("DB Updates Completed.");

    }//SubmitJobRow(jobrowid)


    //Submit ALL Job Rows on page
    function SubmitAllRows() {

        if (count > 0) {

            window.alert("Submitting all Job rows...");


            //SEQUENTIALLY PULL DATA FROM EACH JOB ROW ON PAGE
            //START OFF BY GETTING ALL JOBROWIDFIELDS AVAILABLE

            //Get All Fields By Class Name, and then get all Available Values on page
            //Class Name for Input Field: jobrowIDField
            var className = "jobrowidfield";
            window.alert("Getting all fields with Class Name " + className);


            //Store them in a list
            //https://bobbyhadz.com/blog/javascript-queryselector-class-contains
            const jobrowids = document.querySelectorAll('[class*="jobrowidfield"]');


            var numberofjobrows = jobrowids.length;
            var len = numberofjobrows - 1;

            window.alert(`We have ${numberofjobrows} row(s) to submit.`);




            //Traverse this jobrowsid list
            //Foreach field with className jobrowIDField, get their id and value
            //Using that id and value, do a partial query to get all related input fields
            //Then, store these in a list

            //Example: for jowbrowIDField with id jobrow_0,
            //run a partial query to get all input fields containing "jobrow_0"
            //window.alert(jobrowids[0].value);
            //window.alert(jobrowids[0].id);


            var i;

            for (i = 0; i <= len; i++) {

                var jobrowid = jobrowids[i].value;
                window.alert(jobrowid);


                //Now, for each jobrowidValue, get all related records.
                //Basically use the same functionality as the SubmitJobRow() used
                //for a single Job row Submission:

                //PART 01: GET PRIMARY FIELDS
                var companyNameID = jobrowid + "_jobcompanyname";
                var positionID = jobrowid + "_jobposition";
                var fromDateID = jobrowid + "_jobfromdate";
                var toDateID = jobrowid + "_jobtodate";

                var company = document.getElementById(companyNameID).value;
                var position = document.getElementById(positionID).value;
                var fromDate = document.getElementById(fromDateID).value;
                var toDate = document.getElementById(toDateID).value;

                //Validation Test:
                //window.alert(`Row ${i} CompanyName: ${company}`);


                //PART 02: GET JOB DETAILS FIELDS
                var queryPartial = jobrowid + "_detail_";
                //window.alert(`Query Partial: ${queryPartial}`);

                var jobfunctionNodeList = document.querySelectorAll(`[id*="${queryPartial}"]`);



                //PART 03: POST ALL DATA TO CONTROLLER ACTION
                //Use Ajax Query to post data to Controller Action,
                //which will then handle saving data to proper database table

                //Preliminary Data Preparation Start ============


                var applicantid = @id;

                //Create a unique jobid number using timestamp and job row number
                //Convert current time to string with a format of YYYY-MM-DD_HH-MM-SS_
                //https://tecadmin.net/get-current-date-time-javascript/

                //GET CURRENT DATE-TIME
                var current = new Date();
                //window.alert(current);

                //FORMAT CURRENT DATE-TIME TO YYYY-MM-DD_HH-MM-SS_
                //http://jsfiddle.net/j6qJp/1/
                var date = current.getFullYear() + '-' + ('0' + (current.getMonth() + 1)).slice(-2) + '-' + ('0' + current.getDate()).slice(-2);
                var time = ('0' + current.getHours()).slice(-2) + "-" + ('0' + current.getMinutes()).slice(-2) + "-" + ('0' + current.getSeconds()).slice(-2);

                var currentDateTime = date + "_" + time + "_";
                //window.alert(currentDateTime);


                var jobno = currentDateTime+jobrowid;

                window.alert(`Unique Job Row ID = ${jobno} of lenght ${jobno.length}`);

                //Convert NodeList to Array
                //https://www.geeksforgeeks.org/how-to-convert-a-dom-nodelist-to-an-array-using-javascript/
                const jobfunctionArr = Array.from(jobfunctionNodeList);


                //Declare empty array to store valid Job Functions
                //https://www.quora.com/How-do-you-declare-an-empty-array-in-JavaScript
                var JobFunctions = [];

                //Traverse array
                //https://stackoverflow.com/questions/9329446/for-each-over-an-array-in-javascript
                for (var jobfunction of jobfunctionArr) {
                    //window.alert(jobfunction.value);

                    //if job function is not an empty string value, add to array called JobFunctions
                    //https://stackoverflow.com/questions/351409/how-to-append-something-to-an-array
                    if (jobfunction.value != "") JobFunctions.push(jobfunction.value);

                }


                //Preliminary Data Preparation Stop ============

                //PRIMARY FIELDS
                //AJAX START
                $.ajax({

                    type: 'POST',
                    url: '@Url.Action("AddJobFormActionQuery")',
                    //The traditional parameter is required for dealing with non-primitive datatypes like arrays
                    traditional: true,
                    data: {
                        applicantID: applicantid,
                        jobNumberID: jobno,
                        companyName: company,
                        position: position,
                        fromDate: fromDate,
                        toDate: toDate
                    }

                })//end ajax
                //AJAX STOP


                //DETAILS FIELDS
                //AJAX START
                $.ajax({

                    type: 'POST',
                    url: '@Url.Action("AddJobDetailsFormActionQuery")',
                    //The traditional parameter is required for dealing with non-primitive datatypes like arrays
                    traditional: true,
                    data: {
                        applicantID: applicantid,
                        jobNumberID: jobno,
                        jobFunctionsList: JobFunctions
                    }

                })//end ajax
                //AJAX STOP








            }//for loop









            window.alert("All Job Rows successfully submitted and saved to DB!");

            RemoveAllRows();

            count = 0;

        }//if (count > 0)

    }//function SubmitAllRows()

</script>








<form id="skillform">

    <div id="main" class="form-group">
        <!-- THIS IS WHERE A NEWLY CREATED ROWS WILL APPEAR-->
        <div id="container">
            <div id="totalremoval"></div>
        </div>
    </div>

</form>



