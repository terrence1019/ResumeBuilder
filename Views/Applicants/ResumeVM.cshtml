<!-- This View uses the ViewModel-->

@model RésuméBuilder.ViewModels.ResumeViewModel
@using RésuméBuilder.Models

@{
    ViewBag.Title = "Résumé";


    

}

@Html.Partial("_ResumeStyle")

<h2 id="mainTitle">Résumé</h2>

<div hidden>

    <p>@Model.ApplicantRecordVM.ApplicantID</p>
    <p>@Model.ApplicantRecordVM.ApplicantUsername</p>

</div>


<!-- PERSONAL -->

<div>

    <hr />

    <h1>@Model.PersonalRecordVM.FirstName @Model.PersonalRecordVM.MiddleName @Model.PersonalRecordVM.LastName</h1>




    <div>

        <table id="personal_table">
            <tr>
                <!-- HORIZONTAL ROW 1 -->
                <th class="personal">
                    <!-- CELL 1 OF ROW -->
                    Address
                </th>
                <td>
                    <!-- CELL 2 OF ROW -->
                    @Model.PersonalRecordVM.StreetLocation,
                </td>
                <td>
                </td>

                <th class="personal">
                    <!-- CELL 3 OF ROW -->
                    Email (Work)
                </th>
                <td>
                    <!-- CELL 4 OF ROW -->
                    @Model.PersonalRecordVM.EmailWork
                </td>

                <th class="personal">
                    Mobile
                </th>
                <td>
                    @Model.PersonalRecordVM.PhoneMobile
                </td>


            </tr>

            <tr>
                <!-- HORIZONTAL ROW 2 -->
                <th>

                </th>
                <td>
                    @Model.PersonalRecordVM.AreaLocation,
                </td>

                <td>
                </td>

                <th class="personal">
                    Email (Personal)
                </th>
                <td>
                    @Model.PersonalRecordVM.EmailHome
                </td>

                <th class="personal">
                    Home
                </th>
                <td>
                    @Model.PersonalRecordVM.PhoneHome
                </td>



            </tr>

            <tr>
                <!-- HORIZONTAL ROW 3 -->
                <th>

                </th>
                <td>
                    @Model.PersonalRecordVM.RegionLocation,
                </td>

                <td>
                </td>


            </tr>

            <tr>
                <!-- HORIZONTAL ROW 4 -->
                <td>
                </td>
                <td>
                    Trinidad & Tobago
                </td>

                <td>
                </td>

            </tr>

        </table>

    </div>

</div>

<!-- EXPERIENCE -->
<div>

    <hr />

    <h2>Experience</h2>

    <!-- PULLING RECORDS FROM JOB DB AND JOB DETAILS DB, AND PRESENTING THEM TO RÉSUMÉ VIEW -->
    <!-- In terms of presentation, the data must be presented in the View just as in the prototype

        ALSO, we need to SORT JOBS BY TIMELINE [FROM DATE, DESCENDING LIST]
        1) Store Applicant Records in list (using ApplicantID)
        2) Sort Applicant Records by FromDate in Descending Order

        EXAMPLE:
        <COMPANY>
        <TIMELINE - [FROM DATE, TO DATE]> <POSITION> <DUTIES - [BULLETED LIST]>

        STRATEGY:
        1) STORE AND SORT APPLICANT RECORDS BY FROM DATE
        2) STORE AND SORT COMPANY NAME HEADERS IN RELATION TO SORTED APPLICANT RECORDS
        2) DISPLAY APPLICANT RECORDS USING VIEW STRUCTURE AND FORMAT


        1) STORE AND SORT APPLICANT RECORDS BY FROM DATE
        C# order list by property


    -->


</div>

<!-- SKILLS -->

<div>

    <hr />

    <h2>Skills</h2>


    <!-- PULLING RECORDS FROM SKILL DB AND PRESENTING THEM TO RÉSUMÉ VIEW -->
    @{

        //Target ApplicantID
        int appid = Model.ApplicantRecordVM.ApplicantID;


        //Set up instance of Database Context
        MyDbContext dbContext = new MyDbContext();

        //Pull up the Skill Table
        var skillsTable = dbContext.skillDB;


        //https://stackoverflow.com/questions/47752/remove-duplicates-from-a-listt-in-c-sharp
        //Create a list of Categories to store the Skill Categories an Applicant used
        List<string> SkillCategoryListWithDuplicates = new List<string>();


        //Stores a list of the Applicant Skills
        List<Skill> ApplicantSkills = new List<Skill>();




        //01: TRAVERSE SKILL TABLE
        //02: LOOK FOR RECORDS RELATED TO APPLICANT ID
        //03: STORE THESE RECORDS IN A LIST
        foreach (var skill in skillsTable)
        {
            if (skill.ApplicantID == appid)
            {

                //There needs to be a way to do this:
                /*

                1) Store the Skill Categories --> Using List
                2) Group Skill Categories --> Using List
                3) For each Skill Category, print as Header and the associated skills


                For each Skill Category stored in the array, if skill.SkillCategory == skillGroup



                //<p>RECORD FOUND FOR Application ID @appid!</p>
                <tr>
                    <td>
                        <ul class="skill">
                            <li>@skill.SkillPoint</li>
                        </ul>
                    </td>
                </tr>
                */


                //Store Skill Categories in the list created
                SkillCategoryListWithDuplicates.Add(skill.SkillCategory);

                //Store Applicant's Skill records in the list created
                ApplicantSkills.Add(skill);

            }


        }//foreach (var skill in skillsTable)



        //Traversal of Skill Database complete.
        //We have the different Skill Categories used by Applicant that will be used as Headers.
        //Remove duplicate Categories
        //Create a list of Categories with NO DUPLICATES
        List<string> SkillCategoryList = SkillCategoryListWithDuplicates.Distinct().ToList();




        /*

                        foreach (var category in SkillCategoryList)
                        {
                            <h3>@category OLD WAY</h3>


                            <table>


                                @foreach (var skill in ApplicantSkills)
                                {
                                if (skill.SkillCategory == category)
                                {
                                <tr><td>
                                        <ul class="skill">
                                            <li>@skill.SkillPoint</li>
                                        </ul>
                                    </td></tr>}

                                    //Store SkillPoints in a 3xN Array
                                    //Print them out in the row using a for-loop

                                    //Test first on Repl.it using a multi-dimensional array to
                                    //store test values
                                }


                            </table>


        }

        */


        foreach (var category in SkillCategoryList)
        {



            <h3>@category</h3>

            //3 x Y ROW GENERATION
            int size = ApplicantSkills.Count;

            int i; //row counter
            int j; //column counter

            int k = 0; //list item index counter

            int rowSize = 3; //3-row
            double colSize = (size / 3) + 1;

            string[,] arr = new string[3, size];


            <table>

                <!-- PART 01: STORING ITEMS IN 2D ARRAY -->
                @for (i = 0; i < rowSize; i++)
                {


                    for (j = 0; j < colSize; j++)
                    {

                        if (k < size)
                        {

                            arr[i, j] = ApplicantSkills[k].SkillPoint;
                            string test = arr[i, j];

                            if (ApplicantSkills[k].SkillCategory == category)
                            {
                                <tr>
                                    <td>
                                        <!-- TESTING VALUES FOR CORRECT STORAGE -->
                                        <ul class="skill"><li>@ApplicantSkills[k].SkillPoint</li></ul>
                                    </td>
                                </tr>
                            }//if


                            k++;


                        }//if(k < size)


                    }//for(j = 0; j < colSize; j++)



                }

                <!-- PART 02: PRINTING ITEMS FROM 2D ARRAY -->

            </table>




























        }//end foreach




















        //ORIGINAL APPROACH
        /*
        foreach (var category in SkillCategoryList)
        {
            //<p>@category</p>

            <h4>@category</h4>

            foreach (var skill in skillsTable)
            {

                if (skill.ApplicantID == appid)
                {
                    if (skill.SkillCategory == category)
                    {
                        <p>@skill.SkillPoint</p>
                    }
                }

            }

        }//foreach (var category in SkillCategoryList)

        */





    }





</div>
