<!-- This View uses the ViewModel-->

@model RésuméBuilder.ViewModels.ResumeViewModel
@using RésuméBuilder.Models

@{
    ViewBag.Title = "Résumé";



    //Target ApplicantID
    int appid = Model.ApplicantRecordVM.ApplicantID;


    //Set up instance of Database Context
    MyDbContext dbContext = new MyDbContext();



}

@Html.Partial("_ResumeStyle")


<h2 id="mainTitle">Résumé</h2>

<div hidden>

    <p>@Model.ApplicantRecordVM.ApplicantID</p>
    <p>@Model.ApplicantRecordVM.ApplicantUsername</p>

</div>


<!-- PERSONAL -->

<div>

    <hr />

    <h1>@Model.PersonalRecordVM.FirstName @Model.PersonalRecordVM.MiddleName @Model.PersonalRecordVM.LastName</h1>




    <div>

        <table id="personal_table">
            <tr>
                <!-- HORIZONTAL ROW 1 -->
                <th class="personal">
                    <!-- CELL 1 OF ROW -->
                    Address
                </th>
                <td>
                    <!-- CELL 2 OF ROW -->
                    @Model.PersonalRecordVM.StreetLocation,
                </td>
                <td>
                </td>

                <th class="personal">
                    <!-- CELL 3 OF ROW -->
                    Email (Work)
                </th>
                <td>
                    <!-- CELL 4 OF ROW -->
                    @Model.PersonalRecordVM.EmailWork
                </td>

                <th class="personal">
                    Mobile
                </th>
                <td>
                    @Model.PersonalRecordVM.PhoneMobile
                </td>


            </tr>

            <tr>
                <!-- HORIZONTAL ROW 2 -->
                <th>

                </th>
                <td>
                    @Model.PersonalRecordVM.AreaLocation,
                </td>

                <td>
                </td>

                <th class="personal">
                    Email (Personal)
                </th>
                <td>
                    @Model.PersonalRecordVM.EmailHome
                </td>

                <th class="personal">
                    Home
                </th>
                <td>
                    @Model.PersonalRecordVM.PhoneHome
                </td>



            </tr>

            <tr>
                <!-- HORIZONTAL ROW 3 -->
                <th>

                </th>
                <td>
                    @Model.PersonalRecordVM.RegionLocation,
                </td>

                <td>
                </td>


            </tr>

            <tr>
                <!-- HORIZONTAL ROW 4 -->
                <td>
                </td>
                <td>
                    Trinidad & Tobago
                </td>

                <td>
                </td>

            </tr>

        </table>

    </div>

</div>

<!-- EXPERIENCE -->
<div>

    <hr />

    <h2>Experience</h2>

    <!-- PULLING RECORDS FROM JOB DB AND JOB DETAILS DB, AND PRESENTING THEM TO RÉSUMÉ VIEW -->
    <!-- In terms of presentation, the data must be presented in the View just as in the prototype

        ALSO, we need to SORT JOBS BY TIMELINE [FROM DATE, DESCENDING LIST]
        1) Store Applicant Records in list (using ApplicantID)
        2) Sort Applicant Records by FromDate in Descending Order

        EXAMPLE:
        <COMPANY>
        <TIMELINE - [FROM DATE, TO DATE]> <POSITION> <DUTIES - [BULLETED LIST]>

        //Questions to ask:
        //How do we sort Company Name by From Date?
        //How do we sort Position by From Date?

        STRATEGY:
        1) STORE AND SORT APPLICANT RECORDS BY FROM DATE
        2) STORE AND SORT COMPANY NAME HEADERS IN RELATION TO SORTED APPLICANT RECORDS
        2) DISPLAY APPLICANT RECORDS USING VIEW STRUCTURE AND FORMAT


        1) STORE AND SORT APPLICANT RECORDS BY FROM DATE
        C# order list by property


    -->
    @{

        var jobsTable = dbContext.jobDB;
        var jobdetailsTable = dbContext.jobdetailDB;




        //Get all Company Names and store it
        List<string> CompanyNamesWithDuplicates = new List<string>();
        List<string> PositionsWithDuplicates = new List<string>();
        List<DateTime> FromDatesWithDuplicates = new List<DateTime>();
        List<DateTime> ToDatesWithDuplicates = new List<DateTime>();


        //Stores a list of the Applicant Job
        List<Job> ApplicantJobs = new List<Job>();
        List<JobDetail> ApplicantJobDetails = new List<JobDetail>();






        //01: TRAVERSE JOB TABLE
        //02: LOOK FOR RECORDS RELATED TO APPLICANT ID
        //03: STORE THESE RECORDS IN A LIST


        foreach (var job in jobsTable)
        {
            if (job.ApplicantID == appid)
            {

                //Store Job records for specific Applicant ID
                ApplicantJobs.Add(job);
            }
        }


        //04: SORT STORED RECORDS BY FROM DATE
        //Position of Company Name in list must be sorted based on most recent From Date.
        //The most recent From Date relates to the most recent Job.
        //Also, the most recent Job must be at the head of the list.
        //https://stackoverflow.com/questions/3309188/how-to-sort-a-listt-by-a-property-in-the-object
        List<Job> SortedApplicantJobs = ApplicantJobs.OrderByDescending(j => j.FromDate).ToList();


        //https://makolyte.com/csharp-select-distinct-objects-based-on-a-property/
        //List<Job> SortedApplicantJobsDistinct =
        SortedApplicantJobs.GroupBy(j => j.Position);






        //01: TRAVERSE SORTED (BY FROM DATE) JOB LIST
        //02: GET COMPANY NAMES
        //03: STORE THESE RECORDS IN A LIST
        foreach (var job in SortedApplicantJobs)
        {
            if (job.ApplicantID == appid)
            {
                //Store Company Names found for specific Applicant ID
                CompanyNamesWithDuplicates.Add(job.CompanyName);
                PositionsWithDuplicates.Add(job.Position);
                FromDatesWithDuplicates.Add(job.FromDate);
                ToDatesWithDuplicates.Add(job.ToDate);
            }
        }





        //01: TRAVERSE JOB DETAIL TABLE
        //02: LOOK FOR RECORDS RELATED TO APPLICANT ID
        //03: STORE THESE RECORDS IN A LIST
        foreach (var jobdetail in jobdetailsTable)
        {
            if (jobdetail.ApplicantID == appid)
            {

                //Store Job records for specific Applicant ID
                ApplicantJobDetails.Add(jobdetail);
            }
        }



        //USE COMPANY NAMES AS HEADERS UNDER EXPERIENCE SECTION
        //Create a list of headers using the Company Name list and stripping away Duplicates
        List<string> CompanyNames = CompanyNamesWithDuplicates.Distinct().ToList();
        List<string> Positions = PositionsWithDuplicates.Distinct().ToList();
        List<DateTime> FromDates = FromDatesWithDuplicates.Distinct().ToList();
        List<DateTime> ToDates = ToDatesWithDuplicates.Distinct().ToList();






        //NOW THE CRUCIAL PART OF THE JOB EXPERIENCE OUTPUT:




        //Traverse Company Name List
        /*
        foreach (var company in CompanyNames)
        {
            <h3>@company</h3>


            //NOW THE CRUCIAL PART OF THE JOB EXPERIENCE OUTPUT:
            <table cellspacing="10">

                @foreach (var job in SortedApplicantJobs)
                {




                    if (job.CompanyName == company)
                    {

                        //Format Date-Time variables from Database to String for cleaner look:
                        //https://stackoverflow.com/questions/38823758/format-datetime-now-to-yyyy-mm-dd
                        string fDateStr, tDateStr;

                        //FROM DATE:
                        fDateStr = job.FromDate.ToString("yyyy-MM");

                        //TO DATE:
                        //if Year in Database Record is 9999, identify To Date as Present Job
                        //https://stackoverflow.com/questions/1965087/extract-year-from-datetime-format
                        int year = job.ToDate.Year;
                        if (year == 9999) { tDateStr = "PRESENT"; }
                        else { tDateStr = job.ToDate.ToString("yyyy-MM"); }


                        <tr>
                            <td class="job_timeline">@fDateStr</td>
                            <td class="job_timeline">@tDateStr</td>

                            <td class="job_position">@job.Position</td>

                            <td>
                                @foreach (var jobdetail in ApplicantJobDetails)
                                {
                                    <ul>
                                        @if (jobdetail.JobID == job.JobID)
                                        {
                                            <li>@jobdetail.JobFunction</li>
                                        }
                                    </ul>
                                }
                            </td>



                        </tr>
                    }


                }
            </table>







        }//foreach (var company in CompanyNames)
        */





        //METHOD 2
        //https://stackoverflow.com/questions/2697253/using-linq-to-group-a-list-of-objects-into-a-new-grouped-list-of-list-of-objects
        //https://docs.microsoft.com/en-us/dotnet/csharp/linq/group-query-results
        //https://makolyte.com/csharp-select-distinct-objects-based-on-a-property/
        //https://stackoverflow.com/questions/68088232/c-sharp-linq-group-list-by-a-property-then-select-by-different-groups
        //https://stackoverflow.com/questions/45206416/linq-groupby-and-select-other-attributes-as-list





        //GROUP ON MULTIPLE COLUMNS:
        //https://stackoverflow.com/questions/5231845/c-sharp-linq-group-by-on-multiple-columns
        var GroupedApplicantJobs = SortedApplicantJobs.GroupBy(j => new { j.FromDate, j.ToDate, j.CompanyName, j.Position }).ToList();



        foreach (var company in CompanyNames)
        {

            <h3>@company</h3>

            foreach (var grouped in GroupedApplicantJobs)
            {
                var Key = grouped.Key;

                //Format Date-Time variables from Database to String for cleaner look:
                //https://stackoverflow.com/questions/38823758/format-datetime-now-to-yyyy-mm-dd
                string fDateStr, tDateStr;

                //FROM DATE:
                fDateStr = Key.FromDate.ToString("yyyy-MM");

                //TO DATE:
                //if Year in Database Record is 9999, identify To Date as Present Job
                //https://stackoverflow.com/questions/1965087/extract-year-from-datetime-format
                int year = Key.ToDate.Year;
                if (year == 9999) { tDateStr = "PRESENT"; }
                else { tDateStr = Key.ToDate.ToString("yyyy-MM"); }


                <table cellspacing="10">

                @if (company == grouped.Key.CompanyName)
                {
                        <tr>
                            <td class="job_timeline">@fDateStr</td>
                            <td class="job_timeline">@tDateStr</td>
                            <td class="job_position">@Key.Position</td>



                            <!--
                            We now need to tie Job Details to Results.
                            HOW ARE WE GOING TO DO THAT, USING THE FIELDS AVAILABLE?

                            -->
                            <td>



                                @foreach (var job in SortedApplicantJobs)
                                {
                                    foreach (var jobdetail in ApplicantJobDetails)
                                    {
                                        <ul>
                                            @if (jobdetail.JobID == job.JobID && job.Position == grouped.Key.Position)
                                            {
                                                <li>@jobdetail.JobFunction</li>
                                            }
                                        </ul>
                                    }
                                }







                            </td>




                        </tr>



                        




                }

                </table>

            }



        }

















        /*
        foreach (var companyname in CompanyNames)
        {
            <h3>@companyname</h3>

            <table cellspacing="10">

                <!--

                    The aim is to have a structure that takes into consideration:
                    Grouping FromDate, ToDate, and Position together into a single row For Job,
                    THEN include Job Details

                    C# group similar items in a list
                    https://makolyte.com/csharp-select-distinct-objects-based-on-a-property/

                -->




            </table>

        }//foreach (var companyname in CompanyNames)
        */



    }

</div>

<!-- SKILLS -->

<div>

    <hr />

    <h2>Skills</h2>


    <!-- PULLING RECORDS FROM SKILL DB AND PRESENTING THEM TO RÉSUMÉ VIEW -->
    @{

        //Target ApplicantID
        //int appid = Model.ApplicantRecordVM.ApplicantID;


        //Set up instance of Database Context
        //MyDbContext dbContext = new MyDbContext();

        //Pull up the Skill Table
        var skillsTable = dbContext.skillDB;


        //https://stackoverflow.com/questions/47752/remove-duplicates-from-a-listt-in-c-sharp
        //Create a list of Categories to store the Skill Categories an Applicant used
        List<string> SkillCategoryListWithDuplicates = new List<string>();


        //Stores a list of the Applicant Skills
        List<Skill> ApplicantSkills = new List<Skill>();




        //01: TRAVERSE SKILL TABLE
        //02: LOOK FOR RECORDS RELATED TO APPLICANT ID
        //03: STORE THESE RECORDS IN A LIST
        foreach (var skill in skillsTable)
        {
            if (skill.ApplicantID == appid)
            {

                //There needs to be a way to do this:
                /*

                1) Store the Skill Categories --> Using List
                2) Group Skill Categories --> Using List
                3) For each Skill Category, print as Header and the associated skills


                For each Skill Category stored in the array, if skill.SkillCategory == skillGroup



                //<p>RECORD FOUND FOR Application ID @appid!</p>
                <tr>
                    <td>
                        <ul class="skill">
                            <li>@skill.SkillPoint</li>
                        </ul>
                    </td>
                </tr>
                */


                //Store Skill Categories in the list created
                SkillCategoryListWithDuplicates.Add(skill.SkillCategory);

                //Store Applicant's Skill records in the list created
                ApplicantSkills.Add(skill);

            }


        }//foreach (var skill in skillsTable)



        //Traversal of Skill Database complete.
        //We have the different Skill Categories used by Applicant that will be used as Headers.
        //Remove duplicate Categories
        //Create a list of Categories with NO DUPLICATES
        List<string> SkillCategoryList = SkillCategoryListWithDuplicates.Distinct().ToList();




        /*

                        foreach (var category in SkillCategoryList)
                        {
                            <h3>@category OLD WAY</h3>


                            <table>


                                @foreach (var skill in ApplicantSkills)
                                {
                                if (skill.SkillCategory == category)
                                {
                                <tr><td>
                                        <ul class="skill">
                                            <li>@skill.SkillPoint</li>
                                        </ul>
                                    </td></tr>}

                                    //Store SkillPoints in a 3xN Array
                                    //Print them out in the row using a for-loop

                                    //Test first on Repl.it using a multi-dimensional array to
                                    //store test values
                                }


                            </table>


        }

        */

        <!-- ORIGINAL TEST VERSION -->

        foreach (var category in SkillCategoryList)
        {



            //<h3>@category</h3>

            //3 x Y ROW GENERATION
            int size = ApplicantSkills.Count;

            int i; //row counter
            int j; //column counter

            int k = 0; //list item index counter

            int rowSize = 3; //3-row
            double colSize = (size / 3) + 1;

            string[,] arr = new string[3, size];


            <table>

                <!-- PART 01: STORING ITEMS IN 2D ARRAY -->
                @for (i = 0; i < rowSize; i++)
                {


                    for (j = 0; j < colSize; j++)
                    {

                        if (k < size)
                        {

                            arr[i, j] = ApplicantSkills[k].SkillPoint;
                            string skill = arr[i, j];

                            if (ApplicantSkills[k].SkillCategory == category)
                            {
                                <tr>
                                    <td>
                                        <!-- TESTING VALUES FOR CORRECT STORAGE -->
                                        <!-- <ul class="skill"><li>@ApplicantSkills[k].SkillPoint</li></ul> -->
                                    </td>
                                </tr>
                            }//if


                            k++;


                        }//if(k < size)


                    }//for(j = 0; j < colSize; j++)



                }

                

            </table>

        


        }//end foreach



        <!-- SUPERIOR VERSION -->

        foreach(var category in SkillCategoryList)
        {


                        <h3>@category</h3>

                        //3 x Y ROW GENERATION
                        int size = ApplicantSkills.Count;

            

                        int rowSize = 3; //3-row
                        double colSize = (size / 3) + 1;

                        string[,] arr = new string[3, size];


                        <table>

                            <!-- PART 02: PRINTING ITEMS FROM 2D ARRAY -->
                            @{

                                int x, y, z = 0;

                                for (x = 0; x < colSize; x++)
                                {
                                    <tr>
                                        @for (y = 0; y < rowSize; y++)
                                        {

                                            if (z < size)
                                            {

                                                arr[x, y] = ApplicantSkills[z].SkillPoint;
                                                string skill = arr[x, y];


                                                if (ApplicantSkills[z].SkillCategory == category && arr[x, y] != "")
                                                {

                                                    <td>

                                                        <ul class="skill">
                                                            <li>@skill</li>
                                                        </ul>

                                                    </td>

                                                }

                                                z++;

                                            }




                                        }
                                    </tr>
                                }







                            }



                        </table>


        }

















        //ORIGINAL APPROACH
        /*
        foreach (var category in SkillCategoryList)
        {
            //<p>@category</p>

            <h4>@category</h4>

            foreach (var skill in skillsTable)
            {

                if (skill.ApplicantID == appid)
                {
                    if (skill.SkillCategory == category)
                    {
                        <p>@skill.SkillPoint</p>
                    }
                }

            }

        }//foreach (var category in SkillCategoryList)

        */





    }





</div>
